$date = Carbon::parse($dt);

$isToday = $date->isToday();

$isYesterday = $date->isYesterday();

$isTodayOrYesterday =  $date->isToday() || $date->isYesterday();



"use client";

import { useState } from "react";
import { Input } from "@/components/ui/input";
import { Switch } from "@/components/ui/switch";
import { Button } from "@/components/ui/button";

export default function StoreInfoSettings() {
  const [form, setForm] = useState({
    store_name: "",
    store_description: "",
    store_status: true, // true = Open, false = Closed
  });

  const handleChange = (key: string, value: any) => {
    setForm(prev => ({ ...prev, [key]: value }));
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    // send to backend
    const res = await fetch("/api/seller/settings/store", {
      method: "PUT",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(form),
    });

    if (res.ok) {
      alert("Store info updated!");
    } else {
      alert("Error updating store info.");
    }
  };

  return (
    <form onSubmit={handleSubmit} className="space-y-4 max-w-md">
      <div>
        <label className="block text-sm">Store Name</label>
        <Input
          value={form.store_name}
          onChange={e => handleChange("store_name", e.target.value)}
        />
      </div>

      <div>
        <label className="block text-sm">Description</label>
        <Input
          value={form.store_description}
          onChange={e => handleChange("store_description", e.target.value)}
        />
      </div>

      <div className="flex items-center justify-between">
        <label className="text-sm">Store Open</label>
        <Switch
          checked={form.store_status}
          onCheckedChange={val => handleChange("store_status", val)}
        />
      </div>

      <Button type="submit">Save</Button>
    </form>
  );
}


Example â€” Toggle with instant save (no form)
<Switch
  checked={autoWithdraw}
  onCheckedChange={async (val) => {
    setAutoWithdraw(val); // optimistic update
    const res = await fetch("/api/seller/settings/payouts", {
      method: "PATCH",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ auto_withdraw: val }),
    });

    if (!res.ok) {
      // rollback if failed
      setAutoWithdraw(!val);
      alert("Failed to update setting");
    }
  }}
/>
